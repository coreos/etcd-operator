#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail



find_files() {
  find . -not \( \
      \( \
        -wholename './_output' \
        -o -wholename '*/vendor/*' \
      \) -prune \
    \) -name '*.go'
}


function fmt_pass {
        allfiles=$(find_files)
        echo "Checking gofmt..."
        for file in $allfiles; do
                checkRes=$(gofmt -l -s -d $file)
                if [ -n "${checkRes}" ]; then
                        echo -e "gofmt checking failed:\n${checkRes}"
                        exit 255
                fi
        done


        echo "Checking govet..."
        for file in $allfiles; do
                checkRes=$(go vet $file)
                if [ -n "${checkRes}" ]; then
                        echo -e "go vet checking failed:\n${checkRes}"
                        exit 255
                fi
        done
}

function unittest_pass {
	echo "Unit Testing..."
        TEST_PKGS=`go list ./pkg/...`
	        go test --cover ${TEST_PKGS}
}

function build_pass {

	echo "Building..."
	bin_dir="_output/bin"
	mkdir -p ${bin_dir} || true


	ldKVPairs="github.com/coreos/etcd-operator/pkg/util/k8sutil.BackupImage=${IMAGE}"
	go_ldflags="-X ${ldKVPairs}"

	echo "  Building OPERATOR..."
	CGO_ENABLED=0 go build -installsuffix cgo -ldflags "$go_ldflags" \
		-o ${bin_dir}/etcd-operator ./cmd/operator/main.go
	echo "  Building BACKUP..."
	CGO_ENABLED=0 go build -installsuffix cgo -ldflags "$go_ldflags" \
		-o ${bin_dir}/etcd-backup ./cmd/backup/main.go
}

function docker_pass {
	echo "TODO: Build and push the docker image"
}

if ! which go > /dev/null; then
	echo "golang needs to be installed"
	exit 1
fi

GOVERSION=`go version | tr '.' '\ '| awk '{print $4}'`
if [ ${GOVERSION} -lt 7 ]; then
         echo "go version is ${GOVERSION}"
	 echo "go must by 1.7 and above"
	 exit 1
fi


if ! which docker > /dev/null; then
	echo "docker needs to be installed"
	exit 1
fi

if [ -z "${PASSES-}" ]; then
        PASSES="fmt unittest build docker"
fi

if [ -z "${IMAGE-}" ]; then
	IMAGE="quay.io/coreos/etcd-operator:latest"
	echo "Defaulting Image ENV=${IMAGE}"
fi

for p in $PASSES; do
	time ${p}_pass
done
