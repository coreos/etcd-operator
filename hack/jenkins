#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

: ${UNIQUE_BUILD_NAME:?"Need to set UNIQUE_BUILD_NAME"}
: ${TEST_NAMESPACE:?"Need to set TEST_NAMESPACE"}

origpwd=$(pwd)
GOPATH="${origpwd}/../build-${UNIQUE_BUILD_NAME}/gopath/"
rm -rf $GOPATH
mkdir -p $GOPATH
cd $GOPATH
export GOPATH=`pwd`
echo "GOPATH: ${GOPATH}"

mkdir -p $GOPATH/src/github.com/coreos
ln -s "${origpwd}" $GOPATH/src/github.com/coreos/etcd-operator
cd $GOPATH/src/github.com/coreos/etcd-operator

cleanup() {
	echo "cleaning up ==="
	cd $origpwd
	rm -rf "${origpwd}/../build-${UNIQUE_BUILD_NAME}"
}

trap cleanup EXIT

glide install

GIT_VERSION=$(git rev-parse HEAD)
export OPERATOR_IMAGE="gcr.io/coreos-k8s-scale-testing/etcd-operator:${GIT_VERSION}"

echo "UNIQUE_BUILD_NAME: ${UNIQUE_BUILD_NAME}"
echo "OPERATOR_IMAGE: ${OPERATOR_IMAGE}"
echo "TEST_NAMESPACE: ${TEST_NAMESPACE}"
echo "S3_TEST_ENABLED: ${S3_TEST_ENABLED}"

gcloud docker -a # have docker command access to gcloud 

if "hack/test"; then
	echo "Success! ==="
else
	echo "Fail! ==="
	exit 1
fi
