#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

if [ -z "${PASSES-}" ]; then
	PASSES="fmt build e2e unit"
fi

find_files() {
  find . -not \( \
      \( \
        -wholename './_output' \
        -o -wholename '*/vendor/*' \
        -o -wholename '*/_test/*' \
      \) -prune \
    \) -name '*.go'
}

function fmt_pass {
	allfiles=$(find_files)
	echo "Checking gofmt..."
	for file in $allfiles; do
		checkRes=$(gofmt -l -s -d $file)
		if [ -n "${checkRes}" ]; then
			echo -e "gofmt checking failed:\n${checkRes}"
			exit 255
		fi
	done


	echo "Checking govet..."
	for file in $allfiles; do
		checkRes=$(go vet $file)
		if [ -n "${checkRes}" ]; then
			echo -e "go vet checking failed:\n${checkRes}"
			exit 255
		fi
	done
}

function build_pass {
	IMAGE=$OPERATOR_IMAGE hack/build/operator/build
}

function e2e_pass {
	TEST_PKGS=`go list ./test/e2e/... | grep -v framework`
	go test ${TEST_PKGS} -timeout 30m --race --kubeconfig $KUBECONFIG --operator-image $OPERATOR_IMAGE --namespace ${TEST_NAMESPACE}
}

function unit_pass {
	TEST_PKGS=`go list ./pkg/...`
	go test ${TEST_PKGS} --race
}

# TODO: This could take very long time. Probably run this nightly.
function unitcover_pass {
	# coverage.txt is the combined coverage report consumed by codecov
	echo "mode: atomic" > coverage.txt
	TEST_PKGS=`go list ./pkg/...`
	for pkg in $TEST_PKGS
	do
		go test -race -covermode=atomic -coverprofile=profile.out $pkg
		if [ -f profile.out ]; then
			tail -n +2 profile.out >> coverage.txt
			rm profile.out
		fi
	done
	# Send reports to codecov, CODECOV_TOKEN env must be present in Jenkins
	curl -s https://codecov.io/bash | bash
}

for p in $PASSES; do
	${p}_pass
done

echo "test success ==="
