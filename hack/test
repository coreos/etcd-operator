#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

if [ -z "${PASSES-}" ]; then
	PASSES="fmt build e2e unit"
fi

find_files() {
  find . -not \( \
      \( \
        -wholename './_output' \
        -o -wholename '*/vendor/*' \
        -o -wholename '*/_test/*' \
      \) -prune \
    \) -name '*.go'
}

function fmt_pass {
	allfiles=$(find_files)
	echo "Checking gofmt..."
	for file in $allfiles; do
		checkRes=$(gofmt -l -s -d $file)
		if [ -n "${checkRes}" ]; then
			echo -e "gofmt checking failed:\n${checkRes}"
			exit 255
		fi
	done

	echo "Checking govet..."
	for file in $allfiles; do
		checkRes=$(go vet $file)
		if [ -n "${checkRes}" ]; then
			echo -e "go vet checking failed:\n${checkRes}"
			exit 255
		fi
	done

	checkPkgs=$(go list ./client/... ./cmd/... ./pkg/... ./test/e2e/...)
	
	go get honnef.co/go/tools/cmd/gosimple || true
	if which gosimple >/dev/null; then
		echo "Checking gosimple..."
		checkRes=$(gosimple $checkPkgs) || true
		if [ -n "${checkRes}" ]; then
			echo -e "gosimple checking failed:\n${checkRes}"
			exit 255
		fi
	else
		echo "Skipping gosimple: failed to install"
	fi

	go get honnef.co/go/tools/cmd/unused || true
	if which unused >/dev/null; then
		echo "Checking unused..."
		checkRes=$(unused $checkPkgs) || true
		if [ -n "${checkRes}" ]; then
				echo -e "unused checking failed:\n${checkRes}"
				exit 255
		fi
	else
		echo "Skipping unused: failed to install"
	fi
}

function build_pass {
	IMAGE=$OPERATOR_IMAGE hack/build/operator/build
}

function e2e_pass {
	: ${TEST_S3_BUCKET:?"Need to set TEST_S3_BUCKET"}

	# TODO: Move the scripts for rbac into test/e2e/utils.go
	# Enable rbac if present
	if kubectl --kubeconfig $KUBECONFIG get clusterrole 1> /dev/null ; then
		source hack/ci/rbac_utils.sh
		trap rbac_cleanup EXIT
		# Create role and binding
		if rbac_setup ; then
			echo "RBAC setup success! ==="
		else
			echo "RBAC setup fail! ==="
			exit 1
		fi
	fi

	# Run all the tests by default
	E2E_TEST_SELECTOR=${E2E_TEST_SELECTOR:-.*}
	go test "./test/e2e/" -run "$E2E_TEST_SELECTOR" -timeout 30m --race --kubeconfig $KUBECONFIG --operator-image $OPERATOR_IMAGE --namespace ${TEST_NAMESPACE}
}

function e2eslow_pass {
	E2E_TEST_SELECTOR=${E2E_TEST_SELECTOR:-.*}
	go test "./test/e2e/e2eslow" -run "$E2E_TEST_SELECTOR" -timeout 30m --race \
		--kubeconfig $KUBECONFIG --operator-image $OPERATOR_IMAGE --namespace ${TEST_NAMESPACE}
}

function upgrade_pass {
	# Run all the tests by default
	UPGRADE_TEST_SELECTOR=${UPGRADE_TEST_SELECTOR:-.*}
	go test ./test/e2e/upgradetest/ -run "$UPGRADE_TEST_SELECTOR" -timeout 30m --kubeconfig=$KUBECONFIG --kube-ns=$TEST_NAMESPACE \
		--old-image=$UPGRADE_FROM \
		--new-image=$UPGRADE_TO
}

function unit_pass {
	# coverage.txt is the combined coverage report consumed by codecov
	echo "mode: atomic" > coverage.txt
	TEST_PKGS=`go list ./pkg/...`
	for pkg in $TEST_PKGS
	do
		go test -race -covermode=atomic -coverprofile=profile.out $pkg
		if [ -f profile.out ]; then
			tail -n +2 profile.out >> coverage.txt
			rm profile.out
		fi
	done
	# Send reports to codecov, CODECOV_TOKEN env must be present in Jenkins
	(curl -s https://codecov.io/bash | bash) || true
}

for p in $PASSES; do
	${p}_pass
done

echo "test success ==="
